/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { CalendarEntry } from "./utils/calendar-entry";
export namespace Components {
    interface MonthWheel {
        "hasMinMax": boolean;
        "limits": any;
        "locale": string;
        "month": any[];
    }
    interface MyComponent {
        "calendarEndDate": string;
        "calendarStartDate": string;
        "hasMinMax": boolean;
        "limitLower": number;
        "limitUpper": number;
        /**
          * @props
         */
        "locale": string;
        "openModal": boolean;
        "showFillDays": boolean;
    }
    interface WheelContainer {
        "calendarEndDate": string;
        "calendarStartDate": string;
        "currentYear": number;
        "hasMinMax": boolean;
        "limits": any;
        "locale": string;
        "lowerLimitYear": any;
        "selectedMonth": any;
        "upperYear": any;
    }
    interface YearWheel {
        "calendarEndDate": string;
        "calendarStartDate": string;
        "currentMonth": string;
        "currentYear": number;
        "hasMixMAx": boolean;
        "limits": any;
        "locale": any;
        "upperLimitYear": number;
    }
}
export interface MonthWheelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMonthWheelElement;
}
export interface MyComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyComponentElement;
}
export interface WheelContainerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLWheelContainerElement;
}
export interface YearWheelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLYearWheelElement;
}
declare global {
    interface HTMLMonthWheelElement extends Components.MonthWheel, HTMLStencilElement {
    }
    var HTMLMonthWheelElement: {
        prototype: HTMLMonthWheelElement;
        new (): HTMLMonthWheelElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLWheelContainerElement extends Components.WheelContainer, HTMLStencilElement {
    }
    var HTMLWheelContainerElement: {
        prototype: HTMLWheelContainerElement;
        new (): HTMLWheelContainerElement;
    };
    interface HTMLYearWheelElement extends Components.YearWheel, HTMLStencilElement {
    }
    var HTMLYearWheelElement: {
        prototype: HTMLYearWheelElement;
        new (): HTMLYearWheelElement;
    };
    interface HTMLElementTagNameMap {
        "month-wheel": HTMLMonthWheelElement;
        "my-component": HTMLMyComponentElement;
        "wheel-container": HTMLWheelContainerElement;
        "year-wheel": HTMLYearWheelElement;
    }
}
declare namespace LocalJSX {
    interface MonthWheel {
        "hasMinMax"?: boolean;
        "limits"?: any;
        "locale"?: string;
        "month"?: any[];
        "onSelectedMonthEvent"?: (event: MonthWheelCustomEvent<{ monthIndex: number; month: string | number; year: string }>) => void;
    }
    interface MyComponent {
        "calendarEndDate"?: string;
        "calendarStartDate"?: string;
        "hasMinMax"?: boolean;
        "limitLower"?: number;
        "limitUpper"?: number;
        /**
          * @props
         */
        "locale"?: string;
        "onDayChanged"?: (event: MyComponentCustomEvent<CalendarEntry>) => void;
        "onMonthChanged"?: (event: MyComponentCustomEvent<CalendarEntry>) => void;
        "openModal"?: boolean;
        "showFillDays"?: boolean;
    }
    interface WheelContainer {
        "calendarEndDate"?: string;
        "calendarStartDate"?: string;
        "currentYear"?: number;
        "hasMinMax"?: boolean;
        "limits"?: any;
        "locale"?: string;
        "lowerLimitYear"?: any;
        "onCloseWheel"?: (event: WheelContainerCustomEvent<any>) => void;
        "onCloseWheel2"?: (event: WheelContainerCustomEvent<any>) => void;
        "selectedMonth"?: any;
        "upperYear"?: any;
    }
    interface YearWheel {
        "calendarEndDate"?: string;
        "calendarStartDate"?: string;
        "currentMonth"?: string;
        "currentYear"?: number;
        "hasMixMAx"?: boolean;
        "limits"?: any;
        "locale"?: any;
        "onSelectedDate123"?: (event: YearWheelCustomEvent<{ monthIndex: number; month: string | number; year: string }>) => void;
        "onSelectedYearEvent"?: (event: YearWheelCustomEvent<any>) => void;
        "upperLimitYear"?: number;
    }
    interface IntrinsicElements {
        "month-wheel": MonthWheel;
        "my-component": MyComponent;
        "wheel-container": WheelContainer;
        "year-wheel": YearWheel;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "month-wheel": LocalJSX.MonthWheel & JSXBase.HTMLAttributes<HTMLMonthWheelElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "wheel-container": LocalJSX.WheelContainer & JSXBase.HTMLAttributes<HTMLWheelContainerElement>;
            "year-wheel": LocalJSX.YearWheel & JSXBase.HTMLAttributes<HTMLYearWheelElement>;
        }
    }
}
